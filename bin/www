#!/usr/bin/env node
var debug = require('debug')('my-application');
var app = require('../udstoryd');

app.set('port', process.env.PORT || 3434);

var server = app.listen(app.get('port'), function() {
	debug('Express server listening on port ' + server.address().port);
});





var _ = require('underscore');
var services = require('../modules/services')
var config = require('../config');
var util = require('util');
var fs = require('fs');
var io = require('socket.io').listen(server, {'log': false});
var exec = require('child_process').exec;
var path = require('path');

io.sockets.on('connection', function (socket) {

	var intervals = [];

	socket.emit('unmoderated', {'checked': fs.existsSync(config.unmoderated_flag) });

	Object.keys(services).forEach(function(key){

		// Get the last 5 lines of the most recently modified logfile that begins with [key]
		var base = config[key].logfile.replace(".log", "");
		var cmd = util.format('tail -n 100 "$(ls -t %s* | head -1)"', base);
		console.log(cmd);

		exec(cmd, function(err, stdout, stderr){
			stdout.split("\n").forEach(function(line){
				if(line) {
					var data = JSON.parse(line);
					data.service = key;
					socket.emit('log', data);
				}
			});
		});

		services[key].logger.on('logging', function (transport, level, msg, meta) {
			var keys = ["service", "level", "message", "timestamp", "meta"];
			var values = [key, level, msg, new Date(), meta];
			socket.emit('log', _.object(keys, values));
		});

		var send_status = function() {
			var data = {"service": key, "status": services[key].running};
			socket.emit("status", data);			
		};
		intervals.push( setInterval(send_status, 1000) );
	});

	socket.on('hello', function (data) {
		console.log(data);
	});

	socket.on('unmoderated', function(data){
		if(data.checked) {
			console.log("Creating "+config.unmoderated_flag);
			fs.writeFile(config.unmoderated_flag, "Hey there!");
		} else {
			console.log("Removing "+config.unmoderated_flag);
			fs.unlink(config.unmoderated_flag);
		}
	});

	socket.on('disconnect', function () {
		//io.sockets.emit('user disconnected');
		intervals.forEach(clearInterval);
	});

});